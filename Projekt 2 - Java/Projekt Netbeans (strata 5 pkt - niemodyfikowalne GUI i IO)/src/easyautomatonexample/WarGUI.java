/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package easyautomatonexample;

import automaton.CellularAutomaton;
import automaton.rules.AutomatonRules;
import cells.Cells;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import windows.Launcher;
import windows.Visualization;

/**
 *
 * @author shafe_000
 */
public class WarGUI extends javax.swing.JFrame {

    private final Visualization draw;
    private Cells cells;
    private final Cells temp;
    private final AutomatonRules rules;

    /**
     * Creates new form Reversed
     */
    public WarGUI() {
        setSize(5000, 5000);

        JOptionPane.showMessageDialog(null, "Na twoje terytorium wdarł się wróg (czerwony)! \n Twoim zadaniem jest jego eliminacja, możesz użyć 8 dodatkowych jednostek!");

        initTimer();
        initTimer2();
        life = 2;

        cells = new Cells(25, 20);
        temp = new Cells(25, 20);

        rules = new AutomatonRules(new RulesOfWar());
        draw = new Visualization(cells, 20, 20, rules, new Dimension(420, 420));
        draw.setMouse(true);
        draw.setValue(1);
        add(draw);
        setVisible(true);
        initComponents();
        autoplayTimer2.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jPanel1 = new javax.swing.JPanel();
        START = new javax.swing.JButton();
        START1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(420, 440));
        setResizable(false);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });

        START.setText("start");
        START.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                STARTActionPerformed(evt);
            }
        });

        START1.setText("restart");
        START1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                START1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(START, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(START1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(66, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(START)
                    .addComponent(START1))
                .addContainerGap())
        );

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 198, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        if ((evt.getY() < 400) && (life > 0)) {
            draw.setMouse(true);
        }
    }//GEN-LAST:event_formMouseMoved

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered

    }//GEN-LAST:event_formMouseEntered

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked

    }//GEN-LAST:event_formMouseClicked

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        //draw.setMouse(true);
    }//GEN-LAST:event_formMousePressed
    private int life;
    private void STARTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_STARTActionPerformed
        autoplayTimer.start();
        autoplayTimer2.stop();
    }//GEN-LAST:event_STARTActionPerformed

    private void formMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseReleased

    }//GEN-LAST:event_formMouseReleased

    private void START1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_START1ActionPerformed
        new WarGUI();
        dispose();
    }//GEN-LAST:event_START1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton START;
    private javax.swing.JButton START1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private Timer autoplayTimer;
    private Timer autoplayTimer2;

    private void initTimer() {
        ActionListener listener = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                CellularAutomaton a = new CellularAutomaton(cells);
                a.setRules(rules);
                a.generate();
                cells = a.getCells();
                draw.RefreshCells(cells);

                int nB = 0;
                int nR = 0;
                for (int j = 1; j < cells.getX(); j++) {
                    for (int i = 1; i < cells.getY(); i++) {
                        if (cells.getCell(j, i).getValue() == 1) {
                            nR++;
                        }
                        if (cells.getCell(j, i).getValue() == 2) {
                            nB++;
                        }
                    }
                }
                if ((nB == 0) && (nR > 0)) {
                    JOptionPane.showMessageDialog(null, "Gratuluję wygranej! Twoje plemię odepchnęło najeźdzców!");
                    dispose();
                    new Launcher().setVisible(true);

                }

            }

        };
        autoplayTimer = new Timer(500, listener);
    }

    private void initTimer2() {
        ActionListener listener2 = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                life = 8;
                for (int j = 1; j < cells.getX(); j++) {
                    for (int i = 1; i < cells.getY(); i++) {
                        if (cells.getCell(j, i).getValue() != temp.getCell(j, i).getValue()) {
                            if (temp.getCell(j, i).getValue() == 1) {
                                cells.setCell(j, i, 1);
                            } else {
                                life--;
                            }
                        }
                    }
                }
                draw.setMouse(false);
                setCells();
            }

        };
        autoplayTimer2 = new Timer(750, listener2);
    }

    private void setCells() {

        cells.setCell(12, 9, 2);
        cells.setCell(12, 11, 2);
        cells.setCell(11, 10, 2);
        cells.setCell(13, 10, 2);

        cells.setCell(1, 1, 1);
        cells.setCell(2, 2, 1);

        cells.setCell(23, 20, 1);
        cells.setCell(22, 19, 1);

        cells.setCell(1, 20, 1);
        cells.setCell(2, 19, 1);

        cells.setCell(23, 1, 1);
        cells.setCell(22, 2, 1);

        temp.setCell(12, 9, 2);
        temp.setCell(12, 11, 2);
        temp.setCell(11, 10, 2);
        temp.setCell(13, 10, 2);

        temp.setCell(1, 1, 1);
        temp.setCell(2, 2, 1);

        temp.setCell(23, 20, 1);
        temp.setCell(22, 19, 1);

        temp.setCell(1, 20, 1);
        temp.setCell(2, 19, 1);

        temp.setCell(23, 1, 1);
        temp.setCell(22, 2, 1);

        draw.RefreshCells(cells);
    }
}
